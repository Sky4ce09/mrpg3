spl new players Players 1 * 4
# t1024, hairType, bodyType, hairPalette, bodyPalette, direction (angle / 90), lightBallLight, enabled, equippedWeaponIndex, equippedArmorIndex
spl new playerData PlayerData 10:T1024 2:HairType 2:BodyType 15:HairPalette 15:BodyPalette 2:Direction 5:LightBallLighting 1:Enabled
# health, healthMax, itemCount, score
spl new playerStats PlayerStats 12:PlayerHealth 12:PlayerHealthMax 4:ItemCount 16:Score 4:WeaponIndex 4:ArmorIndex

spl new tileData TileData 11 * 4
spl new subtileData SubtileData 2:Type 9:Content
spl new worldData WorldData 5 * 7 0:MapCount 1:FogDensity 2:FogR 3:FogG 4:FogB 5:FogA 6:FogRandA
# floor palette and wall palette
spl new palette Palette 6 * 3 0:R 1:G 2:B

# item data lmao (type, floor alpha, quantity, effect, effectStrength) / effect / effect strength is used in special effects or consumable effects
spl new itemData ItemData 10:T1024 8:ItemType 8:FloorAlpha 8:Quantity 4:Effect 8:EffectStrength
# itemCategory, itemSubtype (categories 0: weapon, 1: armor, 2: consumable)
spl new itemType ItemType 4 * 2 0:Category 1:Subtype
# the splitter below will not see usage in rendering, remove it later
# only for gear usage and leveling, gone unused by consumables
spl new itemStats ItemStats 11 * 4 0:Value 1:ValueMax 2:Exp 3:ExpMax
spl new itemStats ItemLevel 44:SkippedValues 4:Level 4:LevelMax

spl new entityData EntityData 10 8 8 4 6 6 1 1 2
spl label EntityData 0:T1024 1:EntityType 2:FloorAlpha 3:Effect 4:EffectTimer 5:EffectCooldown 6:EffectRequiresTargeting 7:ShotByPlayer 8:Owner # whether the projectile was shot by a player, give exp in case
# hint: effects with a cooldown of 0 are strictly ondeath (cooldown of 1 achieves per-turn effect)
# entityCategory, entitySubtype
spl new entityType EntityType 4 * 2 0:Category 1:Subtype
spl new entityStats EnemyStats 12:Health 12:HealthMax 12:Damage 10:Reward
spl new entityStats ProjectileStats 12:Damage 4:BlastRadius 12:BlastDamage 2:MovementDirection

set renderIndex 0
set renderCount 18 # count from 0
set connectUnit @mega
set connectFlag 8080
expect cell1 display1
set localCell cell1
set maxPlayerCount 4
set minPlayerDataIndex 8 # where the player data begins
set playerDataSize 2

set mapSize 32
op div rowTileCount mapSize 4 # tetrasubtiles ftw
set tileSize 10
op sub silhouetteSize tileSize 2
op idiv silhouetteIconSize silhouetteSize 2
op idiv halfSIS silhouetteIconSize 2 # used only for silhouette icon alignment, so i can get away with a variable name like this
op sub verticalOffset renderIndex 9
op mul graphicalVerticalOffset verticalOffset tileSize
op add displayOutputY graphicalVerticalOffset 83

set linksToBanks 2

op add finalSignal renderCount 2 # accounts for cPlayerDraw, would add 1 without it
op add renderTarget renderIndex 1
set centerAlignTile 88
#op sub centerAlignTile 88 tileSize # amount of pixels to shift graphics (rects and bitwizard sprites)
op div halftileSize tileSize 2
#op add centerAlignImage centerAlignTile halftileSize

# more experimental variables
#
set detailedFog 0
#
#

takeOrder:
read order localCell 3
jump takeOrder notEqual order 1337

# ordered to get data from cell, get unit first
read localX localCell 5
read localY localCell 6
getUnit:
uflag get any connectUnit connectFlag
sensor x @unit @x
op add check x 2
jump getUnit greaterThan localX check
op sub check x 2
jump getUnit lessThan localX check
sensor y @unit @y
op add check y 2
jump getUnit greaterThan localY check
op sub check y 2
jump getUnit lessThan localY check

# @unit is confirmed to be the right unit
set i 0
set signalsPast 0
read playerIndex localCell 0
op add playerDataIndex playerIndex minPlayerDataIndex # setup
obtainData:
read order localCell 3
read signals localCell 4
op equal awaitingSet order 1337
op equal shouldSendSignal signals renderIndex
op land shouldSendSignal shouldSendSignal awaitingSet
jump obtainDataSet equal shouldSendSignal 1
jump initialRender equal order 69
jump obtainData always
obtainDataSet:
read x localCell 1
read y localCell 2
fun have assignBlock
timer start cancellation 60000
timer loop cancellation
read signals localCell 4
jump sendSignal equal signals renderIndex # successful transmission of all block data
timer close
jump takeOrder always # failsafe attempt at reconnection

sendSignal:
write renderTarget localCell 4
set signalsPast renderTarget
jump obtainData always

initialRender:
read serverTurnCount playerDataBank 60
fun have render

renderLoop:
read disconnectOrder localCell 3
jump takeOrder equal disconnectOrder 420
read serverTurnCount playerDataBank 60
jump renderLoop lessThanEq serverTurnCount turnCount
fun have render
jump renderLoop always

fun new render
set turnCount serverTurnCount

jump actuallyRender notEqual renderIndex 0
draw clear 0 0 0
actuallyRender:
op mul step playerIndex 2
op add playerDataIndex step minPlayerDataIndex
read playerData playerDataBank playerDataIndex
spl of tile PlayerData T1024
# lightBall light
spl of illumination PlayerData 6
op mod povX tile 32
op idiv povY tile 32

# render tiles
read worldData playerDataBank 59
spl of mapCount WorldData MapCount
spl of fogDensity WorldData FogDensity
spl of fogR WorldData FogR
spl of fogG WorldData FogG
spl of fogB WorldData FogB
spl of fogA WorldData FogA
spl of fogRandA WorldData FogRandA
op sub fogDensity fogDensity illumination # lightBalls take effect
op max fogDensity fogDensity 0
# fog density is (re-)randomized after each tile for cool effects

op mul shiftCounter mapCount 2
op add @counter @counter shiftCounter
set renderedMap mapBank1
jump finishSettingCurrentMap always
set renderedMap mapBank2
jump finishSettingCurrentMap always
set renderedMap mapBank3
jump finishSettingCurrentMap always
set renderedMap mapBank4
jump finishSettingCurrentMap always
set renderedMap mapBank5
jump finishSettingCurrentMap always
set renderedMap mapBank6
jump finishSettingCurrentMap always
set renderedMap mapBank7
jump finishSettingCurrentMap always
set renderedMap mapBank8
jump finishSettingCurrentMap always
set renderedMap mapBank9
finishSettingCurrentMap:
op equal renderingFirstMap renderedMap mapBank1

read palette renderedMap 511 # DREAD doesnt work initially
spl of rFloor Palette R
op shl rFloor rFloor 2
spl of gFloor Palette G
op shl gFloor gFloor 2
spl of bFloor Palette B
op shl bFloor bFloor 2
op shr palette palette 18 # retrieve wall palette data
spl of rWall Palette R
op shl rWall rWall 2
spl of gWall Palette G
op shl gWall gWall 2
spl of bWall Palette B
op shl bWall bWall 2

set displayOutputX -7
op sub scanX povX 9
op add stopX scanX 19
op add scanY povY verticalOffset
op mul tile scanY 4
op add tile tile scanX
keepDrawingTiles:
fun have renderTile
op add scanX scanX 1
op add displayOutputX displayOutputX tileSize
jump keepDrawingTiles lessThan scanX stopX

fun close

fun new renderTile
op mul t1024 scanY tileSize
op add t1024 t1024 scanX
op mod subtile t1024 4
op idiv tile t1024 4
read tileData renderedMap tile
spl od subtileData TileData subtile
spl of type SubtileData Type
spl of content SubtileData Content
jump drawFog lessThan scanX 0
jump drawFog lessThan scanY 0
jump drawFog greaterThanEq scanX 32
jump drawFog greaterThanEq scanY 32
op sub diffX povX scanX
op len sight diffX verticalOffset
op add sight sight 0.6
jump renderSilhouette lessThan fogDensity sight

# render clear tile
parr type
draw color rFloor gFloor bFloor content
draw rect displayOutputX displayOutputY tileSize tileSize
/
draw color rWall gWall bWall content
draw rect displayOutputX displayOutputY tileSize tileSize
/
read itemData renderedMap content
spl of aFloor ItemData FloorAlpha
draw color rFloor gFloor bFloor aFloor
draw rect displayOutputX displayOutputY tileSize tileSize
spl of itemType ItemData ItemType
spl of itemCategory ItemType Category
# weapon, armor, consumable, coin
jump dontRenderCoin lessThan itemCategory 3
fun have coin
jump drawFog always
dontRenderCoin:
op mul shiftCounter itemCategory 2
op add @counter @counter i
packcolor inputCol 0.85 0.55 0.75 1
jump drawGenericItem always
packcolor inputCol 0.4 0.4 0.4 1
jump drawGenericItem always
packcolor inputCol 0.1 0.7 0.25 1
drawGenericItem:
fun have genericItem
/
# draw entities
read entityData renderedMap content
spl of aFloor EntityData FloorAlpha
draw color rFloor gFloor bFloor aFloor
draw rect displayOutputX displayOutputY tileSize tileSize
spl of entityType EntityData EntityType
spl of entityCategory EntityType Category
spl of entitySubtype EntityType Subtype
parr entityCategory
# crate / well
op mul shiftCounter entityType 3
op add @counter @counter shiftCounter
fun have crate
jump drawFog always
fun have healingFountain
/
# enemies
op add statsIndex content 1
read entityStats renderedMap statsIndex
spl of health EnemyStats Health
spl of healthMax EnemyStats HealthMax
set drawingEnemy 1
op mul shiftCounter entityType 3
op add @counter @counter shiftCounter
fun have rat
jump drawFog always
fun have blueSlime
jump drawFog always
fun have goldSpirit
jump drawFog always
fun have madFairy
jump drawFog always
fun have greenSlime
jump drawFog always
fun have tangledVines
jump drawFog always
fun have skeleton
jump drawFog always
fun have waterElemental
jump drawFog always
fun have mithrilGolem
/
# projectile
op add statsIndex content 1
read entityStats renderedMap statsIndex
spl of direction ProjectileStats MovementDirection
op add outX displayOutputX halftileSize
op add outY displayOutputY halftileSize
draw color 255 255 255 180
draw poly outX outY 3 10 angle
draw color 0 0 0 220
draw poly outX outY 3 7 angle
//
//
jump drawFog always

renderSilhouette:
parr type
packcolor silhouetteColor 0 0 0 0
/
packcolor silhouetteColor 1 1 1 0.175
/
packcolor silhouetteColor 0.15 0.55 1 0.5
/
packcolor silhouetteColor 0.75 0.15 0.55 0.6
//

op add outX displayOutputX 1
op add outY displayOutputY 1
draw color 255 255 255 0.1
draw rect outX outY silhouetteSize silhouetteSize

op add outX outX halfSIS
op add outY outY halfSIS
draw col silhouetteColor
draw rect outX outY silhouetteIconSize silhouetteIconSize

# this fog subroutine can be used from anywhere, call that convenient
drawFog:
jump drawSimpleFog equal detailedFog 0
fun have drawDetailedFog
jump hhh always
drawSimpleFog:
op rand drawFogA fogRandA
op add drawFogA drawFogA fogA
draw color fogR fogG fogB drawFogA 
draw rect displayOutputX displayOutputY tileSize tileSize
jump hhh equal drawingEnemy 0
# health bar visible through fog
jump hhh greaterThanEq health healthMax
set drawingEnemy 0
op div width health healthMax
op mul width width tileSize
draw color 0 0 0 150
draw rect displayOutputX displayOutputY 10 1
draw color 0 255 0 200
draw rect displayOutputX displayOutputY width 1
hhh:
df display1
fun close

fun new drawDetailedFog
op rand drawFogA fogRandA
op add drawFogA drawFogA fogA
draw color fogR fogG fogB drawFogA 
draw rect displayOutputX displayOutputY halftileSize halftileSize
op add outX displayOutputX halftileSize
op rand drawFogA fogRandA
op add drawFogA drawFogA fogA
draw color fogR fogG fogB drawFogA 
draw rect outX displayOutputY halftileSize halftileSize
op add outY displayOutputY halftileSize
op rand drawFogA fogRandA
op add drawFogA drawFogA fogA
draw color fogR fogG fogB drawFogA 
draw rect outX outY halftileSize halftileSize
op rand drawFogA fogRandA
op add drawFogA drawFogA fogA
draw color fogR fogG fogB drawFogA 
draw rect displayOutputX outY halftileSize halftileSize
fun close

fun new assignBlock
# in order
op mul shift i 2
op add @counter @counter shift
ucontrol getBlock x y type playerDataBank
jump completeAssignment always
ucontrol getBlock x y type mapBank1
jump completeAssignment always
ucontrol getBlock x y type mapBank2
jump completeAssignment always
ucontrol getBlock x y type mapBank3
jump completeAssignment always
ucontrol getBlock x y type mapBank4
jump completeAssignment always
ucontrol getBlock x y type mapBank5
jump completeAssignment always
ucontrol getBlock x y type mapBank6
jump completeAssignment always
ucontrol getBlock x y type mapBank7
jump completeAssignment always
ucontrol getBlock x y type mapBank8
jump completeAssignment always
ucontrol getBlock x y type mapBank9
completeAssignment:
op add i i 1
fun close

# here go all the sprites

fun new rat
draw color 0x5b 0x67 0x64 255
op add elementX displayOutputX 2
op add elementY displayOutputY 2
draw rect elementX elementY 7 3
op add elementX displayOutputX 3
op add elementY displayOutputY 5
draw rect elementX elementY 5 1
draw color 0x7e 0x77 0x7b 255
op add elementY displayOutputY 3
draw rect elementX elementY 5 2
op add elementX displayOutputX 2
draw rect elementX elementY 1 1
op add elementX displayOutputX 3
op add elementY displayOutputY 1
draw rect elementX elementY 1 1
op add elementX displayOutputX 7
draw rect elementX elementY 1 1
draw color 0xee 0x9c 0x81 255
op add elementX displayOutputX 1
op add elementY displayOutputY 3
draw rect elementX elementY 1 3
op add elementX displayOutputX 2
op add elementY displayOutputY 6
draw rect elementX elementY 2 1
draw color 0xaf 0x7f 0x60 255
op add elementX displayOutputX 1
op add elementY displayOutputY 4
draw rect elementX elementY 1 1
op add elementX displayOutputX 2
op add elementY displayOutputY 6
draw rect elementX elementY 1 1
op add elementX displayOutputX 4
op add elementY displayOutputY 7
draw rect elementX elementY 1 1
draw color 0xb1 0x20 0x3d 255
op add elementX displayOutputX 7
op add elementY displayOutputY 4
draw rect elementX elementY 1 1
fun close

fun new blueSlime
draw color 0x03 0x4e 0xb0 255
op add elementX displayOutputX 1
op add elementY displayOutputY 2
draw rect elementX elementY 8 4
op add elementX displayOutputX 3
draw rect elementX elementY 4 6
op add elementX displayOutputX 2
op add elementY displayOutputY 1
draw rect elementX elementY 6 6
draw color 0x30 0x7a 0xc0 255
op add elementY displayOutputY 2
draw rect elementX elementY 6 4
op add elementX displayOutputX 3
draw rect elementX elementY 4 5
draw color 0x17 0x00 0x2e 255
op add elementY displayOutputY 5
draw rect elementX elementY 1 1
op add elementX displayOutputX 6
draw rect elementX elementY 1 1
fun close

fun new greenSlime
draw color 0x03 0xb0 0x5f 255
op add elementX displayOutputX 1
op add elementY displayOutputY 2
draw rect elementX elementY 8 4
op add elementX displayOutputX 3
draw rect elementX elementY 4 6
op add elementX displayOutputX 2
op add elementY displayOutputY 1
draw rect elementX elementY 6 6
draw color 0x11 0x97 0x39 255
op add elementY displayOutputY 2
draw rect elementX elementY 6 4
op add elementX displayOutputX 3
draw rect elementX elementY 4 5
draw color 0x17 0x00 0x2e 255
op add elementY displayOutputY 5
draw rect elementX elementY 1 1
op add elementX displayOutputX 6
draw rect elementX elementY 1 1
fun close

fun new fireSprite
draw color 0xcd 0x17 0x0a 255
op add elementX displayOutputX 2
op add elementY displayOutputY 2
draw rect elementX elementY 6 4
op add elementX displayOutputX 1
op add elementY displayOutputY 7
draw rect elementX elementY 1 2
draw color 0xd9 0x58 0x02 255
op add elementX displayOutputX 3
op add elementY displayOutputY 1
draw rect elementX elementY 4 6
op add elementX displayOutputX 8
op add elementY displayOutputY 7
draw rect elementX elementY 1 1
draw color 0xcd 0x17 0x0a 255
op add elementX displayOutputX 5
op add elementY displayOutputY 6
draw rect elementX elementY 2 1
op add elementY displayOutputY 1
draw rect elementX elementY 2 1
op add elementX displayOutputX 3
draw rect elementX elementY 1 1
op add elementY displayOutputY 6
draw rect elementX elementY 1 2
op add elementX displayOutputX 4
op add elementY displayOutputY 8
draw rect elementX elementY 2 1
op add elementY displayOutputY 7
draw rect elementX elementY 1 1
draw color 0xe0 0xd9 0x00 255
op add elementY displayOutputY 2
draw rect elementX elementY 1 2
op add elementX displayOutputX 5
op add elementY displayOutputY 3
draw rect elementX elementY 1 2
draw color 0x5f 0x14 0x0c 255
op add elementX displayOutputX 6
op add elementY displayOutputY 4
draw rect elementX elementY 1 1
op add elementX displayOutputX 3
draw rect elementX elementY 1 1
fun close

fun new skeleton
draw color 0x9e 0x9e 0x9e 255
op add elementX displayOutputX 3
op add elementY displayOutputY 1
draw rect elementX elementY 1 2
op add elementX displayOutputX 6
draw rect elementX elementY 1 2
op add elementX displayOutputX 4
op add elementY displayOutputY 4
draw rect elementX elementY 1 1
op add elementY displayOutputY 3
draw rect elementX elementY 2 1
op add elementX displayOutputX 2
draw rect elementX elementY 1 2
op add elementX displayOutputX 6
op add elementY displayOutputY 4
draw rect elementX elementY 3 1
draw color 0xba 0xba 0xba 255
op add elementX displayOutputX 3
op add elementY displayOutputY 5
draw rect elementX elementY 4 1
op add elementX displayOutputX 2
op add elementY displayOutputY 6
draw rect elementX elementY 1 2
op add elementX displayOutputX 7
draw rect elementX elementY 1 2
op add elementX displayOutputX 3
op add elementY displayOutputY 8
draw rect elementX elementY 4 1
draw color 0xef 0xec 0xee 255
op add elementY displayOutputY 6
draw rect elementX elementY 1 2
op add elementX displayOutputX 5
draw rect elementX elementY 1 2
fun close

fun new waterElemental
draw color 0x55 0x72 0xb4 170
op add elementX displayOutputX 2
op add elementY displayOutputY 6
draw rect elementX elementY 6 3
op add elementX displayOutputX 3
op add elementY displayOutputY 9
draw rect elementX elementY 3 1
op add elementX displayOutputX 6
op add elementY displayOutputY 5
draw rect elementX elementY 3 1
op add elementY displayOutputY 4
draw rect elementX elementY 1 1
op add elementX displayOutputX 2
draw rect elementX elementY 2 2
draw color 0x18 0x79 0xaa 185
op add elementX displayOutputX 3
op add elementY displayOutputY 5
draw rect elementX elementY 1 1
op add elementX displayOutputX 1
op add elementY displayOutputY 4
draw rect elementX elementY 2 1
op add elementX displayOutputX 7
op add elementY displayOutputY 0
draw rect elementX elementY 2 2
op add elementX displayOutputX 9
op add elementY displayOutputY 2
draw rect elementX elementY 1 1
draw color 0x0a 0x8c 0xf0 200
op add elementX displayOutputX 1
op add elementY displayOutputY 0
draw rect elementX elementY 2 2
op add elementX displayOutputX 2
op add elementY displayOutputY 2
draw rect elementX elementY 1 1
op add elementX displayOutputX 3
op add elementY displayOutputY 1
draw rect elementX elementY 1 3
op add elementX displayOutputX 4
op add elementY displayOutputY 2
draw rect elementX elementY 1 2
op add elementX displayOutputX 0
op add elementY displayOutputY 7
draw rect elementX elementY 1 2
op add elementX displayOutputX 1
op add elementY displayOutputY 8
draw rect elementX elementY 1 2
draw color 0x2b 0xb8 0xd4 220
op add elementX displayOutputX 4
op add elementY displayOutputY 2
draw rect elementX elementY 2 4
draw color 0x5f 0xc6 0xf2 200
op add elementX displayOutputX 5
draw rect elementX elementY 2 2
op add elementX displayOutputX 4
op add elementY displayOutputY 0
draw rect elementX elementY 2 2
op add elementX displayOutputX 3
op add elementY displayOutputY 6
draw rect elementX elementY 4 2
op add elementY displayOutputY 8
draw rect elementX elementY 3 1
draw color 0x2d 0xd1 0xe6 185
op add elementX displayOutputX 5
op add elementY displayOutputY 5
draw rect elementX elementY 2 1
op add elementX displayOutputX 7
op add elementY displayOutputY 4
draw rect elementX elementY 2 1
draw color 0x08 0x91 0x56 215
op add elementX displayOutputX 5
op add elementY displayOutputY 7
draw rect elementX elementY 1 1
op add elementX displayOutputX 3
draw rect elementX elementY 1 1
fun close

fun new mithrilGolem
draw color 0x12 0x35 0x2e 255
op add elementX displayOutputX 1
op add elementY displayOutputY 1
draw rect elementX elementY 3 1
op add elementX displayOutputX 6
draw rect elementX elementY 3 1
op add elementX displayOutputX 3
op add elementY displayOutputY 3
draw rect elementX elementY 4 4
draw color 0x2d 0x58 0x4a 255
op add elementX displayOutputX 1
op add elementY displayOutputY 5
draw rect elementX elementY 2 2
op add elementX displayOutputX 7
draw rect elementX elementY 2 2
draw color 0x22 0x24 0x25 255
op add elementX displayOutputX 2
op add elementY displayOutputY 2
draw rect elementX elementY 2 1
op add elementX displayOutputX 6
draw rect elementX elementY 2 1
op add elementX displayOutputX 4
op add elementY displayOutputY 5
draw rect elementX elementY 2 4
op add elementX displayOutputX 3
op add elementY displayOutputY 6
draw rect elementX elementY 4 2
op add elementX displayOutputX 0
op add elementY displayOutputY 4
draw rect elementX elementY 2 2
op add elementX displayOutputX 8
draw rect elementX elementY 2 2
draw color 0x13 0xbe 0x74 255
op add elementX displayOutputX 4
op add elementY displayOutputY 7
draw rect elementX elementY 2 1
fun close

fun new goldSpirit
draw color 0x90 0x66 0x1d 255
op add elementX displayOutputX 1
op add elementY displayOutputY 1
draw rect elementX elementY 6 3
op add elementX displayOutputX 2
op add elementY displayOutputY 0
draw rect elementX elementY 4 5
op add elementX displayOutputX 5
op add elementY displayOutputY 3
draw rect elementX elementY 3 3
op add elementX displayOutputX 7
op add elementY displayOutputY 5
draw rect elementX elementY 2 3
op add elementY displayOutputY 8
draw rect elementX elementY 1 1
op add elementX displayOutputX 6
op add elementY displayOutputY 9
draw rect elementX elementY 1 1
draw color 0xc6 0x9d 0x0c 255
op add elementX displayOutputX 2
op add elementY displayOutputY 1
draw rect elementX elementY 3 3
op add elementX displayOutputX 5
op add elementY displayOutputY 3
draw rect elementX elementY 2 2
op add elementX displayOutputX 7
op add elementY displayOutputY 5
draw rect elementX elementY 1 1
op add elementX displayOutputX 5
op add elementY displayOutputY 2
draw rect elementX elementY 1 1
draw color 0xe2 0xff 0x0a 255
op add elementX displayOutputX 3
op add elementY displayOutputY 1
op add elementX2 displayOutputX 6
op add elementY2 displayOutputY 4
draw line elementX elementY elementX2 elementY2
draw color 0x4f 0xd6 0xd8 255
op add elementX displayOutputX 2
op add elementY displayOutputY 2
draw rect elementX elementY 1 2
op add elementX displayOutputX 5
draw rect elementX elementY 1 2
fun close

fun new tangledVines
draw color 0x10 0x4e 0x08 255
op add elementX displayOutputX 2
op add elementY displayOutputY 2
draw rect elementX elementY 6 5
op add elementY displayOutputY 0
draw rect elementX elementY 2 1
op add elementX displayOutputX 6
draw rect elementX elementY 2 1
op add elementY displayOutputY 1
draw rect elementX elementY 1 1
op add elementX displayOutputX 3
draw rect elementX elementY 1 1
draw color 0x18 0x6d 0x22 255
op add elementY displayOutputY 3
draw lineRect elementX elementY 4 5
op add elementX displayOutputX 7
op add elementY displayOutputY 2
draw rect elementX elementY 1 2
op add elementX displayOutputX 5
op add elementY displayOutputY 8
draw rect elementX elementY 2 1
draw color 0x05 0x14 0x06 255
op add elementX displayOutputX 2
op add elementY displayOutputY 1
draw rect elementX elementY 1 3
op add elementX displayOutputX 1
op add elementY displayOutputY 4
draw rect elementX elementY 1 2
op add elementX displayOutputX 7
draw rect elementX elementY 1 2
op add elementX displayOutputX 8
op add elementY displayOutputY 5
draw rect elementX elementY 1 2
op add elementX displayOutputX 5
op add elementY displayOutputY 7
draw rect elementX elementY 3 1
op add elementX displayOutputX 3
op add elementY displayOutputY 3
draw rect elementX elementY 3 2
fun close

fun new madFairy
draw color 0x3e 0x75 0x74 230
op add elementX displayOutputX 2
op add elementY displayOutputY 5
draw rect elementX elementY 6 4
op add elementX displayOutputX 3
op add elementY displayOutputY 9
draw rect elementX elementY 4 1
draw color 0xcf 0x20 0x66 210
op add elementX displayOutputX 8
op add elementY displayOutputY 5
draw rect elementX elementY 1 4
op add elementX displayOutputX 1
draw rect elementX elementY 1 4
op add elementX displayOutputX 0
draw rect elementX elementY 10 1
draw color 0x88 0x22 0x66 210
op add elementY displayOutputY 7
draw rect elementX elementY 1 1
op add elementX displayOutputX 9
draw rect elementX elementY 1 1
op add elementX displayOutputX 0
op add elementY displayOutputY 9
op add elementX2 displayOutputX 2
op add elementY2 displayOutputY 7
draw line elementX elementY elementX2 elementY2
op add elementY displayOutputY 4
op add elementY2 displayOutputY 4
draw line elementX elementY elementX2 elementY2
op add elementX displayOutputX 9
op add elementX2 displayOutputX 7
draw line elementX elementY elementX2 elementY2
op add elementY displayOutputY 9
op add elementY2 displayOutputY 7
draw line elementX elementY elementX2 elementY2
op add elementX displayOutputX 7
op add elementY displayOutputY 6
draw rect elementX elementY 2 1
op add elementX displayOutputX 1
draw rect elementX elementY 2 1
draw color 0x59 0x86 0x56 255
op add elementX displayOutputX 3
op add elementY displayOutputY 3
draw rect elementX elementY 4 5
op add elementX displayOutputX 4
op add elementY displayOutputY 8
draw rect elementX elementY 2 1
draw color 0xff 0xc2 0xc2 255
op add elementX displayOutputX 6
op add elementY displayOutputY 6
draw rect elementX elementY 1 1
op add elementX displayOutputX 3
draw rect elementX elementY 1 1
draw color 0x49 0xab 0x74 255
op add elementX displayOutputX 2
op add elementY displayOutputY 1
draw rect elementX elementY 2 3
op add elementX displayOutputX 6
draw rect elementX elementY 2 3
fun close

fun new crate
draw color 0x22 0x20 0x1b 255
op add elementX displayOutputX 1
op add elementY displayOutputY 0
draw rect elementX elementY 8 10
op add elementX displayOutputX 0
op add elementY displayOutputY 1
draw rect elementX elementY 10 8
draw color 0x50 0x37 0x1b 255
op add elementX displayOutputX 1
draw rect elementX elementY 8 8
draw color 0x0a 0x06 0x00 150
op add elementX displayOutputX 3
draw rect elementX elementY 1 8
op add elementX displayOutputX 6
draw rect elementX elementY 1 8
op add elementX displayOutputX 1
op add elementY displayOutputY 3
draw rect elementX elementY 8 1
op add elementY displayOutputY 6
draw rect elementX elementY 8 1
fun close

fun new genericItem
draw color 0x00 0x00 0x00 255
op add elementX displayOutputX 1
op add elementY displayOutputY 3
draw rect elementX elementY 8 4
op add elementX displayOutputX 2
op add elementY displayOutputY 2
draw rect elementX elementY 6 6
op add elementX displayOutputX 3
op add elementY displayOutputY 1
draw rect elementX elementY 4 8
draw col inputCol
op add elementX displayOutputX 4
op add elementY displayOutputY 2
draw rect elementX elementY 2 6
op add elementX displayOutputX 2
op add elementY displayOutputY 4
draw rect elementX elementY 6 2
draw color 0xdf 0xaa 0xaa 175
op add elementX displayOutputX 6
op add elementY displayOutputY 2
draw rect elementX elementY 1 6
op add elementX displayOutputX 2
op add elementY displayOutputY 6
draw rect elementX elementY 6 1
op add elementX displayOutputX 3
op add elementY displayOutputY 2
draw rect elementX elementY 1 6
op add elementX displayOutputX 2
op add elementY displayOutputY 3
draw rect elementX elementY 6 1
fun close

fun new coin
draw color 0x2f 0x23 0x04 255
op add elementX displayOutputX 3
op add elementY displayOutputY 1
draw rect elementX elementY 4 8
op add elementX displayOutputX 2
op add elementY displayOutputY 2
draw rect elementX elementY 6 6
op add elementX displayOutputX 1
op add elementY displayOutputY 3
draw rect elementX elementY 8 4
draw color 0xff 0xf7 0x00 205
op add elementX displayOutputX 3
op add elementY displayOutputY 2
draw rect elementX elementY 4 6
op add elementX displayOutputX 2
op add elementY displayOutputY 3
draw rect elementX elementY 6 4
fun close

fun new healingFountain
draw color 0x32 0xbd 0xec 200
op add elementX displayOutputX 1
op add elementY displayOutputY 1
draw rect elementX elementY 8 3
op add elementX displayOutputX 3
op add elementY displayOutputY 4
draw rect elementX elementY 4 2
op add elementX displayOutputX 4
op add elementY displayOutputY 6
draw rect elementX elementY 2 1
draw color 0x63 0x63 0x63 255
op add elementX displayOutputX 0
op add elementY displayOutputY 1
draw rect elementX elementY 1 4
op add elementX displayOutputX 4
draw rect elementX elementY 2 5
op add elementY displayOutputY 7
draw rect elementX elementY 2 2
op add elementX displayOutputX 9
op add elementY displayOutputY 1
draw rect elementX elementY 1 4
op add elementX displayOutputX 1
op add elementY displayOutputY 0
draw rect elementX elementY 8 1
fun close
